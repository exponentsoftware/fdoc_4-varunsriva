CPU & GPU : 

Process & Thread :
 A process can be described as an application’s executing program.
 A thread is the one that lives inside of process and executes any part of its process's program.
 The Operating System gives the process a "slab" of memory to work with and all application state is kept in that private memory space.
 A process can ask the Operating System to spin up another process to run different tasks. When this happens, different parts of the memory are allocated for the new process. If two processes need to talk, they can do so by using Inter Process Communication (IPC).

Browser Architecure :
 There is no standard specification on how one might build a web browser. One browser’s approach may be completely different from another.
 In Chrome's browser architecure,At the top is the browser process coordinating with other processes that take care of different parts of the application. For the renderer process, multiple processes are created and assigned to each tab. Until very recently, 
 Chrome gave each tab a process when it could; now it tries to give each site its own process, including iframes.

Process and What it controls
Browser	Controls "chrome" part of the application including address bar, bookmarks, back and forward buttons.
Also handles the invisible, privileged parts of a web browser such as network requests and file access.
Renderer	Controls anything inside of the tab where a website is displayed.
Plugin	Controls any plugins used by the website, for example, flash.
GPU	Handles GPU tasks in isolation from other processes. It is separated into different process because GPUs handles requests from multiple apps and draw them in the same surface.
There are even more processes like the Extension process and utility processes. If you want to see how many processes are running in your Chrome, click the options menu icon more_vert at the top right corner, select More Tools, then select Task Manager. This opens up a window with a list of processes that are currently running and how much CPU/Memory they are using.

Each process and thread communicate in order to display a website :
Browser process : everything outside of a tab is handled by the browser process. The browser process has threads like the UI thread which draws buttons and input fields of the browser, 
the network thread which deals with network stack to receive data from the internet, 
the storage thread that controls access to the files and more. 
When you type a URL into the address bar, your input is handled by browser process’s UI thread.


step1:Handling Input:
When a user starts to type into the address bar, the first thing UI thread asks is "Is this a search query or URL?". 
In Chrome, the address bar is also a search input field, so the UI thread needs to parse and decide
whether to send you to a search engine, or to the site you requested.

step2:Start navigation
When a user hits enter, the UI thread initiates a network call to get site content. Loading spinner 
displayed on the corner of a tab, and the network thread goes through appropriate protocols like DNS 
lookup and establishing TLS Connection for the request.At this point, the network thread may receive 
a server redirect header like HTTP 301. In that case, the network thread communicates with UI thread that the server is requesting redirect. Then, another URL request will be initiated.

step3:Read response
Once the response body (payload) starts to come in, the network thread looks at the first few bytes 
of the stream if necessary. The response's Content-Type header should say what type of data it is,If 
the response is an HTML file, then the next step would be to pass the data to the renderer process, but if it is a zip file or some other file then that means it is a download request so they need to pass the data to download manager.

Step 3: Find a renderer process
Once all of the checks are done and Network thread is confident that browser should navigate to the 
requested site, the Network thread tells UI thread that the data is ready. UI thread then finds a 
renderer process to carry on rendering of the web page.Since the network request could take several 
hundred milliseconds to get a response back, an optimization to speed up this process is applied.
When the UI thread is sending a URL request to the network thread at step 2, it already knows which 
site they are navigating to. The UI thread tries to proactively find or start a renderer process in 
parallel to the network request. This way, if all goes as expected, a renderer process is already 
in standby position when the network thread received data. This standby process might not get used 
if the navigation redirects cross-site, in which case a different process might be needed.

 